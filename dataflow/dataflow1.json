{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_Customer_Dim",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "reenamecolumnusingselect"
				},
				{
					"name": "filternull"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as short,",
				"          full_name as string,",
				"          gender as string,",
				"          age as short,",
				"          email as string,",
				"          phone as string,",
				"          address as string,",
				"          loyalty_program_member as boolean,",
				"          join_date as date,",
				"          preferred_store as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(age_fixed = toInteger(age),",
				"          loyalty_flag = iif(lower(toString(loyalty_program_member)) == 'true', true(), false()),",
				"          join_date_fixed = toDate(toString(join_date), 'yyyy-MM-dd')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          customer_id,",
				"          full_name,",
				"          gender,",
				"          age_old = age,",
				"          email,",
				"          phone,",
				"          address,",
				"          loyalty_program_member_old = loyalty_program_member,",
				"          join_date_old = join_date,",
				"          preferred_store,",
				"          age = age_fixed,",
				"          loyalty_program_member = loyalty_flag,",
				"          join_date = join_date_fixed",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> reenamecolumnusingselect",
				"reenamecolumnusingselect filter(isNull(age) == false() && trim(toString(age)) != \"\" &&\r",
				"isNull(join_date) == false() && trim(toString(join_date)) != \"\") ~> filternull",
				"filternull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}